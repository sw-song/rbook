[["index.html", "R Note Intro to R", " R Note Seungwon Song 2021-07-09 Intro to R R is one of the best language for statistics. Sometimes it is compared with python. Python is nice tool for data analysis, especially machine learning or deep learning. But being able to handle R will gives anyone who works with data and statistics another huge advantage. This note will not cover too detailed grammar, internal principles, or advanced techniques. However, it focuses on how to handle data through R even if you do not know R syntax. Then, let’s start lightly! "],["data-visualization.html", "Chapter 1 Data Visualization 1.1 qplot 1.2 hist", " Chapter 1 Data Visualization 1.1 qplot first, let’s import ggplot2 library library(ggplot2) and we use mpg dataset. Extract top 5 rows head(mpg) ## # A tibble: 6 x 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compa… ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compa… ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compa… ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compa… ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compa… ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compa… qplot means “quick plot.” It is useful for quickly running our plot. let’s see some feature’s frequency using qplot qplot(data=mpg, x=manufacturer) qplot(data=mpg, x=fl) qplot(data=mpg, x=year) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. it’s weired. year data have only 2 cases. let’s check that. table(mpg$year) ## ## 1999 2008 ## 117 117 yes. it’s contain only the car data that manufacturered in 1999 and 2008. We have to think about this when analysis this dataset. and let’s go ahead and check the other feature one more. qplot(data=mpg, x=class) like this, we can show data’s frequency by input x(feature). and class contains types of car like size or shape etc. table(mpg$class) ## ## 2seater compact midsize minivan pickup subcompact suv ## 5 47 41 11 33 35 62 Then, what will happen if we input y into qplot function? qplot(data=mpg, x=class, y=hwy) This is scatter plot. From this plot, we can check highway fuel economy of each car class. Pick-up truck and SUV are not good at average fuel economy. But, we have more useful plot than scatter plot for checking the mean of data. Let’s use that. qplot(data=mpg, x=class, y=hwy, geom=&#39;boxplot&#39;, color=class) It’s box plot. We can check means easily and even outliers. It’s very important that how our data visualized and what tools we use. If we use line plot for this situation, It is difficult to accurately show the data. qplot(data=mpg, x=class, y=hwy, geom=&#39;line&#39;, color=class) 1.2 hist hist means histogram. It shows the distribution of continuous(numeric) variable. hist(mpg$hwy) If you input categorical variable(ex. mpg$class) into hist function, it returns error that Error in hist.default(mpg$class) : 'x' must be numeric "],["exploratory-data-analysis.html", "Chapter 2 Exploratory Data Analysis 2.1 head and tail 2.2 dim and str 2.3 summary 2.4 table", " Chapter 2 Exploratory Data Analysis EDA(Exploratory Data Analysis) is necessary for data analyst to check the dataset before statistical modeling(or machine learning) 2.1 head and tail df_mpg &lt;- data.frame(ggplot2::mpg) head(df_mpg) ## manufacturer model displ year cyl trans drv cty hwy fl class ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2.0 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2.0 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact we have loaded mpg dataset from ggplot2 package. ggplot2 contains multiple useful datasets and various visualization tools. head function extract top 6 rows of input dataset. In contrast, we can extract bottom 6 rows using tail function. tail(df_mpg) ## manufacturer model displ year cyl trans drv cty hwy fl class ## 229 volkswagen passat 1.8 1999 4 auto(l5) f 18 29 p midsize ## 230 volkswagen passat 2.0 2008 4 auto(s6) f 19 28 p midsize ## 231 volkswagen passat 2.0 2008 4 manual(m6) f 21 29 p midsize ## 232 volkswagen passat 2.8 1999 6 auto(l5) f 16 26 p midsize ## 233 volkswagen passat 2.8 1999 6 manual(m5) f 18 26 p midsize ## 234 volkswagen passat 3.6 2008 6 auto(s6) f 17 26 p midsize It’s important to check rows in this way, because most of dataset we meet are so large that it can’t be shown just in one page. 2.2 dim and str using dim function, we can check the size of dataset. The size means rows x columns. dim(df_mpg) ## [1] 234 11 This mpg dataset has 234 rows and 11 columns(features). We do not need to use this function just for check entire dataset. dim(head(df_mpg)) ## [1] 6 11 dim(df_mpg[,2:4]) ## [1] 234 3 dim(df_mpg[&#39;model&#39;]) ## [1] 234 1 but we can’t use dim for 1-dim vector. Note that df_mpg[‘model’] is not a vector, it’s dataframe yet. str(df_mpg[&#39;model&#39;]) ## &#39;data.frame&#39;: 234 obs. of 1 variable: ## $ model: chr &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; ... It’s different from df_mpg$model str(df_mpg$model) ## chr [1:234] &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4 quattro&quot; &quot;a4 quattro&quot; ... This is vector. And it’s same with df_mpg[[‘model’]] str(df_mpg[[&#39;model&#39;]]) ## chr [1:234] &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4&quot; &quot;a4 quattro&quot; &quot;a4 quattro&quot; ... 2.3 summary we can check summary statistics using summary function. summary(df_mpg) ## manufacturer model displ year ## Length:234 Length:234 Min. :1.600 Min. :1999 ## Class :character Class :character 1st Qu.:2.400 1st Qu.:1999 ## Mode :character Mode :character Median :3.300 Median :2004 ## Mean :3.472 Mean :2004 ## 3rd Qu.:4.600 3rd Qu.:2008 ## Max. :7.000 Max. :2008 ## cyl trans drv cty ## Min. :4.000 Length:234 Length:234 Min. : 9.00 ## 1st Qu.:4.000 Class :character Class :character 1st Qu.:14.00 ## Median :6.000 Mode :character Mode :character Median :17.00 ## Mean :5.889 Mean :16.86 ## 3rd Qu.:8.000 3rd Qu.:19.00 ## Max. :8.000 Max. :35.00 ## hwy fl class ## Min. :12.00 Length:234 Length:234 ## 1st Qu.:18.00 Class :character Class :character ## Median :24.00 Mode :character Mode :character ## Mean :23.44 ## 3rd Qu.:27.00 ## Max. :44.00 If column is categorical variable, like model, trans, drv, manufacturer, fl, class, it just shows Length, Class and Mode. But in case of numerical, it can shows mean of variable, median of variable, minimum of variable, maximum of variable and 1st and 3rd quartile. 2.4 table And R also provides a frequency table. We can use this as call table function. table(df_mpg$model) ## ## 4runner 4wd a4 a4 quattro ## 6 7 8 ## a6 quattro altima c1500 suburban 2wd ## 3 6 5 ## camry camry solara caravan 2wd ## 7 7 11 ## civic corolla corvette ## 9 5 5 ## dakota pickup 4wd durango 4wd expedition 2wd ## 9 7 3 ## explorer 4wd f150 pickup 4wd forester awd ## 6 7 6 ## grand cherokee 4wd grand prix gti ## 8 5 5 ## impreza awd jetta k1500 tahoe 4wd ## 8 9 4 ## land cruiser wagon 4wd malibu maxima ## 2 5 3 ## mountaineer 4wd mustang navigator 2wd ## 4 9 3 ## new beetle passat pathfinder 4wd ## 6 7 4 ## ram 1500 pickup 4wd range rover sonata ## 10 4 7 ## tiburon toyota tacoma 4wd ## 7 7 table(df_mpg$class) ## ## 2seater compact midsize minivan pickup subcompact suv ## 5 47 41 11 33 35 62 It’s helpful to check counts of each values in variable. To better use, we can use this table with visualizing original variable. qplot(df_mpg$class) You should be careful to visualize the table as it is. If you visualize the table, it shows the different one. qplot(table(df_mpg$class)) ## Don&#39;t know how to automatically pick scale for object of type table. Defaulting to continuous. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],["data-preprocessing.html", "Chapter 3 Data Preprocessing 3.1 ifelse", " Chapter 3 Data Preprocessing While exploring data, we need to preprocess it properly for our purpose. And these work can be repeat until we construct a dataset that can make our probabilistic model well. 3.1 ifelse ifelse is Conditional Statments function that is very simple and useful in R. We can use this with just 3 parameters - condition, return value when it’s true, return value when it’s false. let’s see example code. first, print the head of dataset head(mpg$hwy) ## [1] 29 29 31 30 26 26 And let’s apply ifelse to this head. if the hwy(highway fuel efficiency) is higher than 30, returns ‘Good.’ ifelse(head(mpg$hwy) &gt; 30, &#39;Good&#39;, &#39;Bad&#39;) ## [1] &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; We can use this data by assign method(&lt;-). Let’s Control Entire variable. evaluate_hwy &lt;- ifelse(mpg$hwy &gt; 30, &#39;Good&#39;, &#39;Bad&#39;) print(evaluate_hwy) ## [1] &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [11] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [21] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [31] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [41] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [51] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [61] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [71] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [81] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [91] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; ## [101] &quot;Good&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Good&quot; &quot;Good&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [111] &quot;Bad&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [121] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [131] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [141] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [151] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [161] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [171] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [181] &quot;Bad&quot; &quot;Good&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Good&quot; ## [191] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Good&quot; &quot;Good&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; ## [201] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [211] &quot;Bad&quot; &quot;Bad&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [221] &quot;Bad&quot; &quot;Good&quot; &quot;Good&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; ## [231] &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; &quot;Bad&quot; Then, Why is this necessary? Sometimes we need categorical data(nominal data or ordinal data) for not only visualization but also data handling. Especially, We do not always get gaussian distribution dataset, so since the data is not uniform, it is necessary to divide it into appropriate intervals. "],["references.html", "References", " References "]]
